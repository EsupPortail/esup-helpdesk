<project name="esup-commons" default="commons-error" basedir=".">

	<fail message="ERROR: Ant 1.7 is required (found: ${ant.version})">
		<condition>
			<not>
				<contains string="${ant.version}" substring="1.9" />
			</not>
		</condition>
	</fail>

	<property name="commons.version" value="1.3.13" />
    <!--
    before sourcesup.cru.fr update
    <property name="commons.repository.path-prefix" value="http://sourcesup.cru.fr/cgi/viewvc.cgi/tags/${commons.version}/esup-commons" />
    <property name="commons.repository.path-suffix" value="?root=esup-commons&amp;view=co" />
    -->
    <property name="commons.repository.path-prefix" value="http://subversion.cru.fr/esup-commons/tags/${commons.version}/esup-commons" />
    <property name="commons.repository.path-suffix" value="" />
	<property name="commons.repository.libs" value="
		activation-1.0.2.jar
		antlr-2.7.5.jar
		aspectjrt-1.6.2.jar
		aspectjweaver-1.6.2.jar
		axis-1.2.1.jar
		bcmail-jdk16-144.jar
		bcprov-jdk16-144.jar
		c3p0-0.9.1.2.jar
		casclient-2.1.1.jar
		cglib-nodep-2.1_3.jar
		commons-beanutils-1.6.jar
		commons-codec-1.3.jar
		commons-collections-3.1.jar
		commons-digester-1.7.jar
		commons-discovery-0.2.jar
		commons-el-1.0.jar
		commons-fileupload-1.1.1.jar
		commons-httpclient-3.0.1.jar
		commons-io-1.2.jar
		commons-lang-2.1.jar
		commons-logging-1.0.4.jar
		commons-validator-1.3.1.jar
		dom4j-1.6.1.jar
		ehcache-1.2.1.jar
		esup-uportal-ws-client-20071207.jar
		fck-faces-1.7.26.jar
		hibernate-3.3.1.ga.jar
		icu4j-3_8_1.jar
		jakarta-oro-2.0.8.jar
		javassist-3.9.jar
		jaxrpc-1.2.jar
		jdom-1.0.jar
		jstl-1.1.2.jar
		jta-1.0.jar
		junit-3.8.2.jar
		ldapbp-1.0.jar
		log4j-1.2.15.jar
		mail-1.3.2.jar
		myfaces-api-1.1.5.jar
		myfaces-impl-1.1.5.jar
		mysql-connector-java-5.1.9.jar
		portals-bridges-portletfilter-1.0.1.jar
		rome-0.9.jar
		saaj-api-1.2.1.jar
		slf4j-api-1.5.6.jar
		slf4j-jcl-1.5.6.jar
		spring-2.0.8.jar
		spring-hibernate3-2.0.8.jar
		spring-ldap-1.1.2.jar
		spring-mock-2.0.8.jar
		spring-portlet-2.0.8.jar
		standard-1.1.2.jar
		stax-1.2.0.jar
		stax-api-1.0.1.jar
		tomahawk-1.1.6.jar
		tomahawk-bridge-0.9.1.jar
		wsdl4j-1.5.1.jar
		xfire-all-1.2.6.jar
		XmlSchema-1.2.jar
		" />
	<property name="commons.repository.utils-libs" value="
		jsp-api-2.0.jar
		portlet-api-1.0.jar
		servlet-api-1.0.jar
		" />
	<property name="commons.repository.quick-start-files" value="
		apache-tomcat-${tomcat.version}.zip
		jmxRemote.access
		jmxRemote.password
		lambda-probe-users.xml
		probe.war
		server.xml
		" />
	<property name="commons.repository.quick-start-libs" value="
		mysql-connector-java-5.1.9.jar
		" />

	<import file="${basedir}/build-commons-missing-targets.xml" optional="true" />

	<target name="commons-error" >
		<fail message="do not use build-commons.xml, use build.xml!" />
	</target>

	<property name="devel" value="false" />

	<property name="tomcat.version" value="5.5.17"/>
	<property name="ant-contrib.version" value="1.0"/>
	<property name="utils.dir" value="${basedir}/utils"/>
	<taskdef
		resource="net/sf/antcontrib/antlib.xml"
		classpath="${utils.dir}/ant/ant-contrib-${ant-contrib.version}.jar"/>

	<property name="webapp.dir" value="${basedir}/webapp"/>
	<property name="src.dir" value="${basedir}/src/main/java"/>
	<property name="lib.dir" value="${webapp.dir}/WEB-INF/lib"/>
	<property name="media.dir" value="${webapp.dir}/media"/>
	<property name="props.dir" value="${basedir}/properties"/>
	<property name="build.dir" value="${basedir}/build"/>
	<property name="build.classes" value="${build.dir}/WEB-INF/classes"/>
	<property name="app.config" value="${basedir}/version.properties"/>
	<property name="log4j.batch-config" value="${props.dir}/logging/log4j-batch.properties"/>
	<property name="webapp.config" value="${webapp.dir}/WEB-INF/web.xml"/>
	<property name="portlet.config" value="${webapp.dir}/WEB-INF/portlet.xml"/>

	<path id="batch.classpath">
		<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
		<fileset dir="${build.dir}/WEB-INF/lib" includes="**/*.jar" />
		<pathelement path="${build.dir}"/>
		<pathelement path="${build.classes}"/>
	</path>

	<target name="read-commons-properties">
		<if>
			<ispropertytrue property="devel" />
			<then>
				<if>
					<not>
						<available file="${basedir}/build-devel.properties"/>
 					</not>
					<then>
						<fail message="${basedir}/build-devel.properties not found." />
					</then>
				</if>
				<property file="${basedir}/build-devel.properties" />
			</then>
		</if>
		<if>
			<not>
				<available file="${basedir}/build.properties"/>
			</not>
			<then>
				<fail message="${basedir}/build.properties not found." />
			</then>
		</if>
		<property file="${basedir}/build.properties" />
		<if>
			<not>
				<isset property="quick-start"/>
			</not>
			<then>
				<property name="quick-start" value="false" />
				<echo>Property quick-start is not set, defaults to ${quick-start}.</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="quick-start"/>
			<then>
				<echo>quick-start=true, an embedded tomcat will be used.</echo>
				<if>
					<isset property="tomcat.home"/>
					<then>
						<fail>Property tomcat.home should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="tomcat.home" value="${basedir}/apache-tomcat-${tomcat.version}"/>
				<if>
					<isset property="deploy.type"/>
					<then>
						<fail>Property deploy.type should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="deploy.type" value="servlet" />
				<echo>deploy.type=${deploy.type}</echo>
				<if>
					<isset property="deploy.home"/>
					<then>
						<fail>Property deploy.home should not be set for quick start installations.</fail>
					</then>
				</if>
				<property name="deploy.home" value="${basedir}/deploy" />
				<echo>deploy.home=${deploy.home}</echo>
				<property name="tomcat.home" value="${basedir}/apache-tomcat-${tomcat.version}"/>
				<if>
					<not>
						<isset property="lambdaProbe.use"/>
					</not>
					<then>
						<property name="lambdaProbe.use" value="false" />
						<echo>Property lambdaProbe.use is not set, defaults to ${lambdaProbe.use}.</echo>
					</then>
				</if>
				<if>
					<not>
						<isset property="jmxRemote.use"/>
					</not>
					<then>
						<property name="jmxRemote.use" value="false" />
						<echo>Property jmxRemote.use is not set, defaults to ${jmxRemote.use}.</echo>
					</then>
				</if>
				<if>
					<ispropertytrue property="jmxRemote.use"/>
					<then>
						<if>
							<not>
								<and>
									<isset property="jmxRemote.user"/>
									<isset property="jmxRemote.password"/>
								</and>
							</not>
							<then>
								<fail>Properties jmxRemote.user and jmxRemote.password must be set.</fail>
							</then>
						</if>
						<if>
							<not>
								<isset property="jmxRemote.port"/>
							</not>
							<then>
								<property name="jmxRemote.port" value="8999" />
								<echo>Property jmxRemote.port is not set, defaults to ${jmxRemote.port}.</echo>
							</then>
						</if>
					</then>
				</if>
			</then>
			<else>
				<if>
					<isset property="lambdaProbe.use"/>
					<then>
						<fail>Property lambdaProbe.use is reserved to quick-start installations.</fail>
					</then>
				</if>
				<if>
					<not>
						<isset property="deploy.type"/>
					</not>
					<then>
						<property name="deploy.type" value="servlet" />
						<echo>Property deploy.type is not set, defaults to ${deploy.type}.</echo>
					</then>
				</if>
				<switch value="${deploy.type}">
					<case value="servlet" />
					<case value="portlet" />
					<default>
						<fail>deploy.type=${deploy.type} is not supported (supported values are servlet and portlet).</fail>
					</default>
				</switch>
				<echo>deploy.type=${deploy.type}</echo>
				<if>
					<not>
						<isset property="deploy.home"/>
					</not>
					<then>
						<echo>Please set property deploy.home in build.properties.</echo>
					</then>
				</if>
				<echo>deploy.home=${deploy.home}</echo>
			</else>
		</if>
		<if>
			<equals arg1="${deploy.type}" arg2="servlet" />
			<then>
				<if>
					<not>
						<isset property="tomcat.host" />
					</not>
					<then>
						<property name="tomcat.host" value="localhost" />
						<echo>tomcat.host is not set, defaults to ${tomcat.host}.</echo>
					</then>
					<else>
						<echo>tomcat.host=${tomcat.host}</echo>
					</else>
				</if>
                <if>
                    <not>
                        <isset property="tomcat.port" />
                    </not>
                    <then>
                        <property name="tomcat.port" value="8080" />
                        <echo>tomcat.port is not set, defaults to ${tomcat.port}.</echo>
                    </then>
                    <else>
                        <echo>tomcat.port=${tomcat.port}</echo>
                    </else>
                </if>
                <if>
                    <not>
                        <isset property="tomcat.cas-port" />
                    </not>
                    <then>
                        <property name="tomcat.cas-port" value="${tomcat.port}" />
                        <echo>tomcat.cas-port is not set, defaults to ${tomcat.cas-port}.</echo>
                    </then>
                    <else>
                        <echo>tomcat.cas-port=${tomcat.cas-port}</echo>
                    </else>
                </if>
                <if>
                    <equals arg1="${tomcat.port}" arg2="80" />
                    <then>
                        <property name="tomcat.port.string" value="" />
                    </then>
                    <else>
                        <property name="tomcat.port.string" value=":${tomcat.port}" />
                    </else>
                </if>
                <if>
                    <equals arg1="${tomcat.cas-port}" arg2="80" />
                    <then>
                        <property name="tomcat.cas-port.string" value="" />
                    </then>
                    <else>
                        <property name="tomcat.cas-port.string" value=":${tomcat.cas-port}" />
                    </else>
                </if>
				<if>
					<ispropertytrue property="quick-start"/>
					<then>
						<if>
							<not>
								<isset property="tomcat.shutdown-port" />
							</not>
							<then>
								<property name="tomcat.shutdown-port" value="8005" />
								<echo>tomcat.shutdown-port is not set, defaults to ${tomcat.shutdown-port}.</echo>
							</then>
							<else>
								<echo>tomcat.shutdown-port=${tomcat.shutdown-port}</echo>
							</else>
						</if>
						<if>
							<not>
								<isset property="tomcat.path" />
							</not>
							<then>
								<property name="tomcat.path" value="" />
								<echo>tomcat.path is not set, defaults to ${tomcat.path}.</echo>
							</then>
							<else>
								<echo>tomcat.path=${tomcat.path}</echo>
							</else>
						</if>
		                <if>
		                    <and>
		                        <isset property="tomcat.ajp-port" />
		                        <not>
		                            <equals arg1="${tomcat.ajp-port}" arg2="" />
		                        </not>
		                    </and>
		                    <then>
                                <property name="ajp.use" value="true" />
                                <echo>tomcat.ajp-port=${tomcat.ajp-port}</echo>
		                    </then>
		                    <else>
                                <property name="ajp.use" value="false" />
                                <echo>property tomcat.ajp-port is empty, AJP connector will not be enabled.</echo>
		                    </else>
		                </if>
					</then>
				</if>
				<property name="tomcat.path" value="" />
				<echo>tomcat.path=${tomcat.path}</echo>
				<property name="tomcat.url" value="http://${tomcat.host}${tomcat.port.string}${tomcat.path}" />
				<echo>tomcat.url=${tomcat.url}</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="lambdaProbe.use"/>
			<then>
				<echo>Lambda Probe : ${tomcat.url}/probe (user=${lambdaProbe.user}, password=${lambdaProbe.password}).</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="jmxRemote.use"/>
			<then>
				<echo>JMX remote : ${tomcat.host}:${jmxRemote.port} (user=${jmxRemote.user}, password=${jmxRemote.password}).</echo>
			</then>
		</if>
		<if>
			<not>
				<isset property="hibernate.useJndi"/>
			</not>
			<then>
				<property name="hibernate.useJndi" value="false" />
				<echo>Property hibernate.useJndi is not set, defaults to ${hibernate.useJndi}.</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="hibernate.useJndi"/>
			<then>
				<echo>Use JNDI: ${hibernate.useJndi}</echo>
			</then>
		</if>
		<if>
			<ispropertytrue property="devel" />
			<then>
				<path id="compile.classpath">
					<fileset dir="${commons.lib.dir}" includes="**/*.jar" />
					<fileset dir="${lib.dir}" includes="**/*.jar" />
					<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
				</path>
			</then>
			<else>
				<path id="compile.classpath">
					<fileset dir="${lib.dir}" includes="**/*.jar" />
					<fileset dir="${utils.dir}/lib" includes="**/*.jar" />
				</path>
			</else>
		</if>
	</target>

	<target name="commons-check-shared-config" depends="read-commons-properties" />

	<target name="commons-check-web-config" depends="commons-check-shared-config" >
		<if>
			<and>
				<equals arg1="${deploy.type}" arg2="portlet" />
				<not>
					<available file="${portlet.config}"/>
				</not>
			</and>
			<then>
				<fail message="${portlet.config} not found." />
			</then>
		</if>
	</target>

	<target name="check-log4j-batch-config" depends="read-commons-properties" >
		<if>
			<not>
				<available file="${log4j.batch-config}"/>
			</not>
			<then>
				<fail message="${log4j.batch-config} not found." />
			</then>
		</if>
	</target>

	<target name="commons-check-batch-config" depends="commons-check-shared-config,check-log4j-batch-config" />

	<target name="check-tomcat" depends="read-commons-properties" >
		<if>
			<ispropertyfalse property="quick-start" />
			<then>
				<if>
					<ispropertytrue property="devel" />
					<then>
						<if>
							<not>
								<isset property="tomcat.home" />
							</not>
							<then>
								<fail>Please set property tomcat.home.</fail>
							</then>
						</if>
					</then>
					<else>
						<fail>This target is available for quick-start installations only.</fail>
					</else>
				</if>
			</then>
		</if>
		<property name="tomcat.bootstrap" value="${tomcat.home}/bin/bootstrap.jar"/>
		<if>
			<not>
				<available file="${tomcat.bootstrap}"/>
			</not>
			<then>
				<if>
					<ispropertytrue property="quick-start" />
					<then>
						<echo>${tomcat.bootstrap} not found, installing a new instance...</echo>
						<unzip src="${utils.dir}/tomcat/apache-tomcat-${tomcat.version}.zip"
							dest="${basedir}" />
						<echo>Removing useless applications in ${tomcat.home}/webapps...</echo>
						<delete dir="${tomcat.home}/webapps/balancer" />
						<delete dir="${tomcat.home}/webapps/jsp-examples" />
						<delete dir="${tomcat.home}/webapps/ROOT" />
						<delete dir="${tomcat.home}/webapps/servlets-examples" />
						<delete dir="${tomcat.home}/webapps/tomcat-docs" />
						<delete dir="${tomcat.home}/webapps/webdav" />
						<echo>done.</echo>
					</then>
					<else>
						<fail message="${tomcat.bootstrap} not found, please check your tomcat installation" />
					</else>
				</if>
			</then>
		</if>
		<if>
			<ispropertytrue property="quick-start" />
			<then>
				<copy todir="${tomcat.home}/common/lib" >
					<fileset dir="${utils.dir}/tomcat/quick-start-lib" includes="*.jar" />
				</copy>
				<copy file="${utils.dir}/tomcat/server.xml" tofile="${tomcat.home}/conf/server.xml" overwrite="true">
					<filterchain>
						<expandproperties/>
					</filterchain>
				</copy>
				<if>
					<ispropertytrue property="ajp.use" />
					<then>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-AJP-ONLY--&gt;" value="" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-AJP-ONLY--&gt;" value="" />
					</then>
					<else>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-AJP-ONLY--&gt;" value="&lt;!--BEGIN-AJP-ONLY" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-AJP-ONLY--&gt;" value="END-AJP-ONLY--&gt;" />
					</else>
				</if>
				<if>
					<ispropertytrue property="lambdaProbe.use" />
					<then>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-LAMBDA-PROBE-ONLY--&gt;" value="" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-LAMBDA-PROBE-ONLY--&gt;" value="" />
						<if>
							<not>
								<available file="${tomcat.home}/probe.war" />
							</not>
							<then>
								<copy file="${utils.dir}/tomcat/probe.war" todir="${tomcat.home}/webapps" />
							</then>
						</if>
						<copy file="${utils.dir}/tomcat/lambda-probe-users.xml" todir="${tomcat.home}/conf" overwrite="true">
							<filterchain>
								<expandproperties/>
							</filterchain>
						</copy>
					</then>
					<else>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-LAMBDA-PROBE-ONLY--&gt;" value="&lt;!--BEGIN-LAMBDA-PROBE-ONLY" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-LAMBDA-PROBE-ONLY--&gt;" value="END-LAMBDA-PROBE-ONLY--&gt;" />
						<if>
							<available file="${tomcat.home}/probe.war" />
							<then>
								<delete dir="${tomcat.home}/webapps/probe" />
								<delete file="${tomcat.home}/probe.war" />
							</then>
						</if>
					</else>
				</if>
				<if>
					<ispropertytrue property="jmxRemote.use" />
					<then>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-JMX-REMOTE-ONLY--&gt;" value="" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-JMX-REMOTE-ONLY--&gt;" value="" />
						<copy todir="${tomcat.home}/conf" file="${utils.dir}/tomcat/jmxRemote.password">
							<filterchain>
								<expandproperties/>
							</filterchain>
						</copy>
						<chmod file="${tomcat.home}/conf/jmxRemote.password" perm="700" />
						<copy todir="${tomcat.home}/conf" file="${utils.dir}/tomcat/jmxRemote.access">
							<filterchain>
								<expandproperties/>
							</filterchain>
						</copy>
					</then>
					<else>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-JMX-REMOTE-ONLY--&gt;" value="&lt;!--BEGIN-JMX-REMOTE-ONLY" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-JMX-REMOTE-ONLY--&gt;" value="END-JMX-REMOTE-ONLY--&gt;" />
						<delete file="${tomcat.home}/conf/jmxRemote.password" />
						<delete file="${tomcat.home}/conf/jmxRemote.access" />
					</else>
				</if>
				<if>
					<ispropertytrue property="hibernate.useJndi" />
					<then>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-JNDI-ONLY--&gt;" value="" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-JNDI-ONLY--&gt;" value="" />
					</then>
					<else>
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--BEGIN-JNDI-ONLY--&gt;" value="&lt;!--BEGIN-JNDI-ONLY" />
						<replace file="${tomcat.home}/conf/server.xml"
							token="&lt;!--END-JNDI-ONLY--&gt;" value="END-JNDI-ONLY--&gt;" />
					</else>
				</if>
			</then>
		</if>
		<if>
			<not>
				<available file="${tomcat.bootstrap}"/>
			</not>
			<then>
				<fail message="${tomcat.bootstrap} not found, please check your tomcat installation" />
			</then>
		</if>
		<!--if>
			<not>
				<isset property="tomcat.keystore" />
			</not>
			<then>
				<property name="tomcat.keystore" value="${utils.dir}/cas/cru-root.keystore"/>
				<echo message="Property tomcat.keystore not set, using default (${tomcat.keystore})" />
			</then>
		</if-->
	</target>

	<target name="set-download-properties" depends="read-commons-properties" >
		<!-- override thistarget in build.xml if needed -->
	</target>

	<target name="commons-download-files" depends="read-commons-properties,set-download-properties" >
		<property file="${app.config}" />
		<if>
			<ispropertyfalse property="devel" />
			<then>
				<echo>checking esup-commons libraries...</echo>
				<if>
					<not>
						<available file="${utils.dir}/lib/.ok" type="file" />
					</not>
					<then>
						<mkdir dir="${utils.dir}/lib" />
						<for list="${commons.repository.utils-libs}" delimiter=" " param="lib" >
							<sequential>
								<if>
									<not>
										<available file="${utils.dir}/lib/@{lib}" type="file" />
									</not>
									<then>
										<echo>downloading @{lib}...</echo>
										<get src="${commons.repository.path-prefix}/utils/lib/@{lib}${commons.repository.path-suffix}"
											dest="${utils.dir}/lib/@{lib}" verbose="off" />
									</then>
									<else>
										<echo>found @{lib}.</echo>
									</else>
								</if>
							</sequential>
						</for>
						<touch file="${utils.dir}/lib/.ok" />
					</then>
				</if>
				<if>
					<not>
						<available file="${lib.dir}/.esup-commons.ok" type="file" />
					</not>
					<then>
						<mkdir dir="${lib.dir}" />
						<for list="${commons.repository.libs}" delimiter=" " param="lib" >
							<sequential>
								<if>
									<not>
										<available file="${lib.dir}/@{lib}" type="file" />
									</not>
									<then>
										<echo>downloading @{lib}...</echo>
										<get src="${commons.repository.path-prefix}/webapp/WEB-INF/lib/@{lib}${commons.repository.path-suffix}"
											dest="${lib.dir}/@{lib}" verbose="off" />
									</then>
									<else>
										<echo>found @{lib}.</echo>
									</else>
								</if>
							</sequential>
						</for>
						<touch file="${lib.dir}/.esup-commons.ok" />
					</then>
				</if>
				<echo>up to date.</echo>
				<if>
					<ispropertytrue property="quick-start" />
					<then>
						<echo>checking esup-commons quick-start files...</echo>
						<if>
							<not>
								<available file="${utils.dir}/tomcat/.ok" type="file" />
							</not>
							<then>
								<mkdir dir="${utils.dir}/tomcat" />
								<for list="${commons.repository.quick-start-files}" delimiter=" " param="file" >
									<sequential>
										<if>
											<not>
												<available file="${utils.dir}/tomcat/@{file}" type="file" />
											</not>
											<then>
												<echo>downloading @{file}...</echo>
												<get src="${commons.repository.path-prefix}/utils/tomcat/@{file}${commons.repository.path-suffix}"
													dest="${utils.dir}/tomcat/@{file}" verbose="off" />
											</then>
											<else>
												<echo>found @{file}.</echo>
											</else>
										</if>
									</sequential>
								</for>
							</then>
						</if>
						<touch file="${utils.dir}/tomcat/.ok" />
						<if>
							<not>
								<available file="${utils.dir}/tomcat/quick-start-lib/.ok" type="file" />
							</not>
							<then>
								<mkdir dir="${utils.dir}/tomcat/quick-start-lib" />
								<for list="${commons.repository.quick-start-libs}" delimiter=" " param="lib" >
									<sequential>
										<if>
											<not>
												<available file="${utils.dir}/tomcat/quick-start-lib/@{lib}" type="file" />
											</not>
											<then>
												<echo>downloading @{lib}...</echo>
												<get src="${commons.repository.path-prefix}/utils/tomcat/quick-start-lib/@{lib}${commons.repository.path-suffix}"
													dest="${utils.dir}/tomcat/quick-start-lib/@{lib}" verbose="off" />
											</then>
											<else>
												<echo>found @{lib}.</echo>
											</else>
										</if>
									</sequential>
								</for>
							</then>
						</if>
						<touch file="${utils.dir}/tomcat/quick-start-lib/.ok" />
						<echo>up to date.</echo>
					</then>
				</if>
				<echo>checking ${app.name} libs...</echo>
				<if>
					<not>
						<available file="${lib.dir}/.${app.name}.ok" type="file" />
					</not>
					<then>
						<for list="${app.repository.libs}" delimiter=" " param="lib" >
							<sequential>
								<if>
									<not>
										<available file="${lib.dir}/@{lib}" type="file" />
									</not>
									<then>
										<echo>downloading @{lib}...</echo>
										<get src="${app.repository.path-prefix}/webapp/WEB-INF/lib/@{lib}${app.repository.path-suffix}"
											dest="${lib.dir}/@{lib}" verbose="off" />
									</then>
									<else>
										<echo>found @{lib}.</echo>
									</else>
								</if>
							</sequential>
						</for>
					</then>
				</if>
				<touch file="${lib.dir}/.${app.name}.ok" />
				<echo>up to date.</echo>
			</then>
		</if>
	</target>

	<target name="commons-prepare" depends="commons-download-files" >
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />
	</target>

	<target name="commons-compile-shared" depends="read-commons-properties" >
		<copy todir="${build.dir}/WEB-INF/lib" >
			<fileset dir="${webapp.dir}/WEB-INF/lib"/>
		</copy>
		<property name="compile.debug" value="true" />
		<property name="compile.deprecation" value="true" />
		<property name="compile.optimize" value="true" />
		<property name="compile.nowarn" value="false" />
		<if>
			<ispropertytrue property="devel" />
			<then>
				<javac
					srcdir="${commons.src.dir}"
					destdir="${build.classes}"
					debug="${compile.debug}"
					nowarn="${compile.nowarn}"
					deprecation="${compile.deprecation}"
					optimize="${compile.optimize}" >
					<classpath refid="compile.classpath" />
				</javac>
			</then>
		</if>
		<javac
			srcdir="${src.dir}"
			destdir="${build.classes}"
			debug="${compile.debug}"
			nowarn="${compile.nowarn}"
			deprecation="${compile.deprecation}"
			optimize="${compile.optimize}">
			<classpath refid="compile.classpath" />
		</javac>
		<if>
			<ispropertytrue property="devel" />
			<then>
				<copy todir="${build.classes}/properties" >
					<fileset dir="${commons.props.dir}" excludes="**/*example*" />
				</copy>
				<copy todir="${build.dir}" overwrite="true" >
					<fileset dir="${commons.webapp.dir}" />
				</copy>
				<copy todir="${build.classes}" flatten="false">
					<fileset dir="${commons.src.dir}" includes="**/*.properties" />
				</copy>
			</then>
		</if>
		<copy todir="${build.classes}/properties" overwrite="true" >
			<fileset dir="${props.dir}" excludes="applicationContext.xml dao/hibernate/hibernate-*.cfg.xml logging/log4j*.properties jsf/application.xml misc/application.xml cache/ehcache.xml" />
		</copy>
		<copy todir="${build.classes}/properties" overwrite="true" >
			<fileset dir="${props.dir}"
				includes="applicationContext.xml dao/hibernate/hibernate-*.cfg.xml logging/log4j*.properties jsf/application.xml misc/application.xml cache/ehcache.xml"
				excludes="logging/log4j.properties" />
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		<copy file="${props.dir}/logging/log4j.properties" todir="${build.classes}" overwrite="true" >
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		<copy file="${props.dir}/i18n/bundles/Messages_en.properties"
			tofile="${build.classes}/properties/i18n/bundles/Messages.properties"
			overwrite="true" />
		<if>
			<ispropertytrue property="devel" />
			<then>
				<copy file="${commons.props.dir}/i18n/bundles/Commons_en.properties"
					tofile="${build.classes}/properties/i18n/bundles/Commons.properties"
					overwrite="true" />
			</then>
			<else>
				<copy file="${props.dir}/i18n/bundles/Commons_en.properties"
					tofile="${build.classes}/properties/i18n/bundles/Commons.properties"
					overwrite="true" />
			</else>
		</if>
	</target>

	<target name="commons-compile-batch" depends="read-commons-properties" />

	<target name="commons-compile-web" depends="read-commons-properties" >
		<copy todir="${build.dir}/WEB-INF" overwrite="true" file="${webapp.dir}/WEB-INF/web.xml" >
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		<if>
			<equals arg1="${deploy.type}" arg2="servlet" />
			<then>
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--BEGIN-PORTLET-ONLY--&gt;" value="&lt;!--BEGIN-PORTLET-ONLY" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--END-PORTLET-ONLY--&gt;" value="END-PORTLET-ONLY--&gt;" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--BEGIN-SERVLET-ONLY--&gt;" value="" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--END-SERVLET-ONLY--&gt;" value="" />
			</then>
			<else>
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--BEGIN-SERVLET-ONLY--&gt;" value="&lt;!--BEGIN-SERVLET-ONLY" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--END-SERVLET-ONLY--&gt;" value="END-SERVLET-ONLY--&gt;" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--BEGIN-PORTLET-ONLY--&gt;" value="" />
				<replace file="${build.dir}/WEB-INF/web.xml"
					token="&lt;!--END-PORTLET-ONLY--&gt;" value="" />
			</else>
		</if>
		<copy todir="${build.dir}" overwrite="true" >
			<fileset dir="${webapp.dir}" excludes="WEB-INF/web*.xml" />
		</copy>
		<property name="portal-api.jar" value="portlet-api-1.0.jar" />
		<if>
			<equals arg1="${deploy.type}" arg2="servlet" />
			<then>
				<copy todir="${build.dir}/WEB-INF/lib" file="${utils.dir}/lib/${portal-api.jar}" />
			</then>
			<else>
				<delete file="${build.dir}/WEB-INF/lib/${portal-api.jar}" />
			</else>
		</if>
	</target>

	<target name="commons-deploy" depends="read-commons-properties" >
		<if>
			<not>
				<isset property="deploy.home" />
			</not>
			<then>
				<fail message="Please set property deploy.home in build.properties" />
			</then>
		</if>
		<mkdir dir="${deploy.home}" />
		<copy todir="${deploy.home}" >
			<fileset dir="${build.dir}" excludes="WEB-INF/classes/org/esupportail/commons/portal/ws/**/*" />
		</copy>
	</target>

	<target name="commons-clean" depends="read-commons-properties" >
		<if>
			<ispropertytrue property="quick-start" />
			<then>
				<delete dir="${tomcat.home}" />
			</then>
		</if>
		<delete dir="${build.dir}" />
		<delete dir="${deploy.home}" />
		<delete dir="${javadoc.dir}" />
		<delete dir="${doc.dir}/examples" />
	</target>

	<property name="commons.recover.files" value="build.properties properties/i18n/bundles/Custom_*.properties properties/config.properties webapp/media/custom.css" />
	<target name="commons-recover-config" >
		<property file="${app.config}" />
		<echo>Trying to guess the previous configuration...</echo>
		<property name="recover.types" value="-,-quick-start-" />
		<for list="${recover.previous-versions}" param="recover.ver" >
			<sequential>
				<if>
					<not>
						<isset property="recover.type" />
					</not>
					<then>
						<for list="${recover.types}" param="recover.typ" >
							<sequential>
								<echo>looking for ../${app.name}@{recover.typ}@{recover.ver}...</echo>
								<if>
									<not>
										<isset property="recover.type" />
									</not>
									<then>
										<if>
											<available file="${basedir}/../${app.name}@{recover.typ}@{recover.ver}" type="dir" />
											<then>
												<property name="recover.version" value="@{recover.ver}" />
												<property name="recover.type" value="@{recover.typ}" />
											</then>
										</if>
									</then>
								</if>
							</sequential>
						</for>
					</then>
				</if>
			</sequential>
		</for>
		<if>
			<not>
				<isset property="recover.version" />
			</not>
			<then>
				<fail>no previous installation found, can not recover configuration files.</fail>
			</then>
			<else>
				<echo>found!</echo>
			</else>
		</if>
		<echo>recover.type=${recover.type}</echo>
		<echo>recover.version=${recover.version}</echo>
		<property name="recover.basedir" value="${basedir}/../${app.name}${recover.type}${recover.version}" />
		<echo>recover.basedir=${recover.basedir}</echo>
		<if>
			<not>
				<available file="${recover.basedir}/build.properties" />
			</not>
			<then>
				<fail>File ${recover.basedir}/build.properties not found, can not recover configuration files.</fail>
			</then>
		</if>
		<copy todir="${basedir}" file="${recover.basedir}/build.properties" overwrite="true"/>
		<property file="${basedir}/build.properties" />
		<if>
			<isset property="custom.recover.files"/>
			<then>
				<property name="recover.files" value="${commons.recover.files} ${app.recover.files} ${custom.recover.files}" />
			</then>
			<else>
				<property name="recover.files" value="${commons.recover.files} ${app.recover.files}" />
			</else>
		</if>
		<echo>recover.files=${recover.files}</echo>
		<copy todir="${basedir}" overwrite="true">
			<fileset dir="${recover.basedir}" includes="${recover.files}" />
		</copy>
	</target>

	<target name="compile-batch" >
		<fail message="target compile-batch should be defined in build.xml" />
	</target>

	<target name="test-ldap" depends="compile-batch,commons-check-batch-config" description="test the LDAP connection">
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-ldap"/>
	    </java>
	</target>

	<target name="test-smtp" depends="compile-batch,commons-check-batch-config" description="test the SMTP connection">
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-smtp"/>
	    </java>
	</target>

	<target name="test-portal" depends="compile-batch,commons-check-batch-config" description="test the portal connection">
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-portal"/>
	    </java>
	</target>

	<target name="test-database" depends="compile-batch,commons-check-batch-config" description="test the database connection">
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.batch.Batch">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-database"/>
	    </java>
	</target>

	<target name="commons-init-data" >
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.services.application.VersionningUtils">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="init"/>
	    </java>
	</target>

	<target name="commons-upgrade" >
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.services.application.VersionningUtils">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="upgrade"/>
	    </java>
	</target>

	<target name="commons-check-version" >
		<java fork="true" dir="${build.dir}" classname="org.esupportail.commons.services.application.VersionningUtils">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="check-version"/>
	    </java>
	</target>

	<target name="test-beans" depends="compile-batch,commons-check-batch-config" description="test all the beans">
		<java fork="true" dir="${build.dir}" classname="${batch-class}">
			<classpath refid="batch.classpath" />
			<sysproperty key="log4j.configuration" value="file:${log4j.batch-config}" />
			<arg value="test-beans"/>
	    </java>
	</target>

	<target name="commons-start-tomcat" depends="check-tomcat" >
		<echo message="Starting Tomcat..."/>
		<echo message="tomcat.home = ${tomcat.home}"/>
	    <property name="memory.xmx" value="1024m" />
	    <property name="memory.maxPermSize" value="512m" />
		<echo message="memory.xmx = ${memory.xmx}"/>
		<echo message="memory.maxPermSize = ${memory.maxPermSize}"/>
		<if>
			<isset property="tomcat.keystore" />
			<then>
				<property name="jvmarg.trustStore" value="-Djavax.net.ssl.trustStore=${tomcat.keystore}"/>
			</then>
		</if>
		<if>
			<ispropertytrue property="jmxRemote.use" />
			<then>
				<property name="jvmarg.jmxRemote" value="-Dcom.sun.management.jmxremote" />
				<property name="jvmarg.jmxRemote.hostname" value="-Djava.rmi.server.hostname=${tomcat.host}" />
				<property name="jvmarg.jmxRemote.port" value="-Dcom.sun.management.jmxremote.port=${jmxRemote.port}" />
				<property name="jvmarg.jmxRemote.auth" value="-Dcom.sun.management.jmxremote.authenticate=true" />
				<property name="jvmarg.jmxRemote.passwordFile" value="-Dcom.sun.management.jmxremote.password.file=${tomcat.home}/conf/jmxRemote.password" />
				<property name="jvmarg.jmxRemote.accessFile" value="-Dcom.sun.management.jmxremote.access.file=${tomcat.home}/conf/jmxRemote.access" />
			</then>
			<else>
				<property name="jvmarg.jmxRemote" value="" />
				<property name="jvmarg.jmxRemote.hostname" value="" />
				<property name="jvmarg.jmxRemote.port" value="" />
				<property name="jvmarg.jmxRemote.auth" value="" />
				<property name="jvmarg.jmxRemote.passwordFile" value="" />
				<property name="jvmarg.jmxRemote.accessFile" value="" />
			</else>
		</if>
		<if>
			<ispropertytrue property="debug" />
			<then>
				<property name="jvmarg.debug" value="-Xdebug"/>
				<property name="jvmarg.runjdwp" value="-Xrunjdwp:transport=dt_socket,address=${jpdaAddress},server=y,suspend=n"/>
				<sleep milliseconds="500"/>
			</then>
			<else>
				<property name="jvmarg.debug" value="-Xdebug=false"/>
				<property name="jvmarg.runjdwp" value="-Xrunjdwp:transport="/>
			</else>
		</if>
		<if>
			<ispropertytrue property="debug" />
			<then>
				<property name="jvmarg.debug" value="-Xdebug"/>
				<property name="jvmarg.runjdwp" value="-Xrunjdwp:transport=dt_socket,address=${jpdaAddress},server=y,suspend=n"/>
				<sleep milliseconds="500"/>
				<if>
					<ispropertytrue property="jmxRemote.use" />
					<then>
						<if>
							<isset property="jvmarg.trustStore" />
							<then>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.trustStore}" />
									<jvmarg value="${jvmarg.debug}" />
									<jvmarg value="${jvmarg.runjdwp}" />
									<jvmarg value="${jvmarg.jmxRemote}" />
									<jvmarg value="${jvmarg.jmxRemote.hostname}" />
									<jvmarg value="${jvmarg.jmxRemote.port}" />
									<jvmarg value="${jvmarg.jmxRemote.auth}" />
									<jvmarg value="${jvmarg.jmxRemote.passwordFile}" />
									<jvmarg value="${jvmarg.jmxRemote.accessFile}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</then>
							<else>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.debug}" />
									<jvmarg value="${jvmarg.runjdwp}" />
									<jvmarg value="${jvmarg.jmxRemote}" />
									<jvmarg value="${jvmarg.jmxRemote.hostname}" />
									<jvmarg value="${jvmarg.jmxRemote.port}" />
									<jvmarg value="${jvmarg.jmxRemote.auth}" />
									<jvmarg value="${jvmarg.jmxRemote.passwordFile}" />
									<jvmarg value="${jvmarg.jmxRemote.accessFile}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</else>
						</if>
					</then>
					<else>
						<if>
							<isset property="jvmarg.trustStore" />
							<then>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.trustStore}" />
									<jvmarg value="${jvmarg.debug}" />
									<jvmarg value="${jvmarg.runjdwp}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</then>
							<else>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.debug}" />
									<jvmarg value="${jvmarg.runjdwp}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</else>
						</if>
					</else>
				</if>
			</then>
			<else>
				<if>
					<ispropertytrue property="jmxRemote.use" />
					<then>
						<if>
							<isset property="jvmarg.trustStore" />
							<then>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.trustStore}" />
									<jvmarg value="${jvmarg.jmxRemote}" />
									<jvmarg value="${jvmarg.jmxRemote.hostname}" />
									<jvmarg value="${jvmarg.jmxRemote.port}" />
									<jvmarg value="${jvmarg.jmxRemote.auth}" />
									<jvmarg value="${jvmarg.jmxRemote.passwordFile}" />
									<jvmarg value="${jvmarg.jmxRemote.accessFile}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</then>
							<else>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.jmxRemote}" />
									<jvmarg value="${jvmarg.jmxRemote.hostname}" />
									<jvmarg value="${jvmarg.jmxRemote.port}" />
									<jvmarg value="${jvmarg.jmxRemote.auth}" />
									<jvmarg value="${jvmarg.jmxRemote.passwordFile}" />
									<jvmarg value="${jvmarg.jmxRemote.accessFile}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</else>
						</if>
					</then>
					<else>
						<if>
							<isset property="jvmarg.trustStore" />
							<then>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="${jvmarg.trustStore}" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</then>
							<else>
								<java
									fork="true"
									dir="${tomcat.home}"
									classname="org.apache.catalina.startup.Bootstrap">
									<classpath>
										<pathelement path="${tomcat.bootstrap}"/>
									</classpath>
									<sysproperty key="catalina.home" value="${tomcat.home}"/>
									<sysproperty key="java.net.preferIPv4Stack" value="true" />
									<jvmarg value="-Xmx${memory.xmx}" />
									<jvmarg value="-XX:MaxPermSize=${memory.maxPermSize}" />
									<arg value="start"/>
								</java>
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="commons-stop-tomcat" depends="check-tomcat" >
		<echo message="Stopping Tomcat..."/>
		<java
			fork="true"
			dir="${tomcat.home}"
			classname="org.apache.catalina.startup.Bootstrap">
			<classpath>
				<pathelement path="${tomcat.bootstrap}"/>
			</classpath>
			<sysproperty key="catalina.home" value="${tomcat.home}"/>
			<arg value="stop"/>
		</java>
	</target>

</project>
