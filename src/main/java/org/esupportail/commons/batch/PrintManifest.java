/**
 * ESUP-Portail Commons - Copyright (c) 2006-2009 ESUP-Portail consortium.
 */
package org.esupportail.commons.batch; 

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.esupportail.commons.exceptions.ConfigException;
import org.esupportail.commons.services.application.ApplicationService;
import org.esupportail.commons.services.application.ApplicationUtils;
import org.esupportail.commons.services.exceptionHandling.ExceptionUtils;
import org.esupportail.commons.services.logging.Logger;
import org.esupportail.commons.services.logging.LoggerImpl;

/**
 * A class to print the manifest of applications.
 */
public class PrintManifest {

	/**
	 * A logger.
	 */
	private static final Logger LOG = new LoggerImpl(PrintManifest.class);

	/**
	 * Bean constructor.
	 */
	private PrintManifest() {
		throw new UnsupportedOperationException();
	}

	/**
	 * Print the syntax and exit.
	 */
	private static void syntax() {
		throw new IllegalArgumentException(
				"syntax: " + PrintManifest.class.getSimpleName() + " <file>");
	}
	
	/**
	 * Print the application name and version to a properties file.
	 * @param path the path of the file to write
	 * @throws IOException 
	 * @throws ConfigException 
	 */
	private static void print(final String path) throws IOException, ConfigException {
		File file = new File(path);
		if (file.exists() && !file.delete()) {
			throw new IOException("could not delete [" + path + "]");
		}
        FileWriter out = new FileWriter(file);
//        out.write("#\n");
//        out.write("# " + path + "\n");
//        out.write("#\n");
//        out.write("# This file was generated by ant target _print-manifest,\n");
//        out.write("# do not edit manually\n");
//        out.write("#\n");
        out.write("Manifest-Version: 1.0\n");
		ApplicationService applicationService = ApplicationUtils.createApplicationService();
        out.write("Implementation-Title: " + applicationService.getName() + "\n");
        out.write("Implementation-Version: " + applicationService.getVersion() + "\n");
        out.write("Implementation-Vendor: " + applicationService.getVendor() + "\n");
        out.close();
        LOG.info("wrote [" + path + "].");
	}

	/**
	 * Dispatch dependaing on the arguments.
	 * @param args
	 * @throws IOException 
	 */
	protected static void dispatch(final String[] args) throws IOException {
		switch (args.length) {
		case 1:
			print(args[0]);
			break;
		default:
			syntax();
			break;
		}
	}

	/**
	 * The main method, called by ant.
	 * @param args
	 */
	public static void main(final String[] args) {
		try {
			dispatch(args);
		} catch (Throwable t) {
			ExceptionUtils.catchException(t);
		}
	}

}
